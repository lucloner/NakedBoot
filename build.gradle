buildscript {
    repositories {
        jcenter()
        mavenCentral()
        google()
        mavenLocal()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.2.0'
    }
}

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.3.61'
    // Provide convenience executables for trying out the examples.
    id 'application'
    // Generate IntelliJ IDEA's .idea & .iml project files
    id 'idea'
    id 'war'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'com.google.protobuf' version '0.8.8'

    // Generate IntelliJ IDEA's .idea & .iml project files
    // Starting with 0.8.4 of protobuf-gradle-plugin, *.proto and the gen output files are added
    // to IntelliJ as sources. It is no longer necessary to add them manually to the idea {} block
    // to jump to definitions from Java and Kotlin files.
    // For best results, install the Protobuf and Kotlin plugins for IntelliJ.
}

group 'net.vicp.biggee.java.sys'
version '0.2-SNAPSHOT'

sourceCompatibility = 11

repositories {
    jcenter()
    maven { // The google mirror is less flaky than mavenCentral()
        url "https://maven-central.storage-download.googleapis.com/repos/central/data/"
    }
    mavenCentral()
    google()
    mavenLocal()
    flatDir { dirs "lib" }
}
// IMPORTANT: You probably want the non-SNAPSHOT version of gRPC. Make sure you
// are looking at a tagged version of the example and not "master"!

// Feel free to delete the comment at the next line. It is just for safely
// updating the version in our release process.
def grpcVersion = '1+' // CURRENT_GRPC_VERSION
def slf4j_version = '2+'
dependencies {
    def kotlinVersion = plugins.findPlugin("org.jetbrains.kotlin.jvm").kotlinPluginVersion
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    testCompile group: 'junit', name: 'junit', version: '4+'
    testImplementation "junit:junit:4+"

    // https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core
    compile group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: '9+'
    // log
    compile "org.slf4j:slf4j-log4j12:$slf4j_version"
    // https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-jasper
    compile group: 'org.apache.tomcat.embed', name: 'tomcat-embed-jasper', version: '9+'
    // https://mvnrepository.com/artifact/org.jetbrains.kotlin/kotlin-reflect
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: kotlinVersion
    // https://mvnrepository.com/artifact/org.jetbrains.kotlin/kotlin-android-extensions-runtime
    runtime group: 'org.jetbrains.kotlin', name: 'kotlin-android-extensions-runtime', version: kotlinVersion

    implementation "io.grpc:grpc-netty-shaded:${grpcVersion}"
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"

    testImplementation "io.grpc:grpc-testing:${grpcVersion}" // gRCP testing utilities
    testImplementation "org.mockito:mockito-core:2.28.2"
}

compileKotlin {
    kotlinOptions.jvmTarget = sourceCompatibility
}

compileTestKotlin {
    kotlinOptions.jvmTarget = sourceCompatibility
}

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
    main {
        java {
            srcDir 'src/main'
        }
        resources {
            srcDir 'src/main/resources'
            srcDir 'tomcat/root'
            srcDir 'tomcat/war'
        }
    }
}
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

war {
    from 'tomcat/root' // adds a file-set to the root of the archive
    webInf { from 'tomcat/WEB-INF' } // adds a file-set to the WEB-INF dir.
    classpath fileTree('warlib') // adds a file-set to the WEB-INF/lib dir.
    //classpath configurations.moreLibs // adds a configuration to the WEB-INF/lib dir.
    webXml = file('tomcat/web.xml') // copies a file to WEB-INF/web.xml
    manifest {
        attributes 'Extension-Name': 'NBBP_ALL_20191218'
    }
}

task clearBluePrint(type:Delete){
    def toDel=['build','tomcat/webapps','tomcat/work']
    delete toDel
}

tasks.clean.dependsOn 'clearBluePrint'

startScripts.enabled = false
mainClassName = "net.vicp.biggee.java.sys.BluePrint"

shadowJar {
    manifest {
        attributes 'Extension-Name': 'NBBP_ALL_20191218'
    }
}

manifest {
    attributes 'Main-Class': mainClassName
}

compileJava{
    options.verbose true
}

protobuf {
    protoc { artifact = 'com.google.protobuf:protoc:3.11.0' }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

startScripts.enabled = false

task nakedGrpcS(type: CreateStartScripts) {
    mainClassName = 'net.vicp.biggee.kotlin.net.grpc.NakedGrpcSever'
    applicationName = 'ng-server'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task nakedGrpcC(type: CreateStartScripts) {
    mainClassName = 'net.vicp.biggee.kotlin.net.grpc.NakedGrpcClient'
    applicationName = 'ng-client'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

applicationDistribution.into('bin') {
    from(nakedGrpcS)
    from(nakedGrpcC)
    fileMode = 0755
}

