
plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.3.60'
    // Provide convenience executables for trying out the examples.
    id 'application'
    // ASSUMES GRADLE 2.12 OR HIGHER. Use plugin version 0.7.5 with earlier gradle versions
    id 'com.google.protobuf' version '0.8.8'
    // Generate IntelliJ IDEA's .idea & .iml project files
    id 'idea'
    id 'war'
}

group 'net.vicp.biggee.java.sys'
version '0.1-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    jcenter()
    maven { // The google mirror is less flaky than mavenCentral()
        url "https://maven-central.storage-download.googleapis.com/repos/central/data/"
    }
    mavenCentral()
    google()
    mavenLocal()
    flatDir { dirs "lib" }
}

// IMPORTANT: You probably want the non-SNAPSHOT version of gRPC. Make sure you
// are looking at a tagged version of the example and not "master"!

// Feel free to delete the comment at the next line. It is just for safely
// updating the version in our release process.
def grpcVersion = '1.25+' // CURRENT_GRPC_VERSION
def protobufVersion = '3.11.0'
def protocVersion = protobufVersion
def slf4j_version = '2+'
dependencies {
    def kotlinVersion = plugins.findPlugin("org.jetbrains.kotlin.jvm").kotlinPluginVersion
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testImplementation "junit:junit:4.12"
/*
    compileOnly "javax.annotation:javax.annotation-api:1.2"
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"

    // examples/advanced need this for JsonFormat
    implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"
    runtimeOnly "io.grpc:grpc-netty-shaded:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    testImplementation "org.mockito:mockito-core:2.28.2"
    testImplementation "io.grpc:grpc-testing:${grpcVersion}" // gRCP testing utilities
*/
    testImplementation "org.mockito:mockito-core:2.28.2"
    // https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core
    compile group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: '9.0+'
    // log
    compile "org.slf4j:slf4j-log4j12:$slf4j_version"
    // https://mvnrepository.com/artifact/org.fusesource.jansi/jansi
    compile group: 'org.fusesource.jansi', name: 'jansi', version: '1.18+'
    implementation 'org.apache.tomcat:jasper:6.0.53'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

protobuf {
    protoc { artifact = 'com.google.protobuf:protoc:3.11.0' }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
            srcDir 'src/main'
        }
        resources {
            srcDir 'src/main/resources'
            srcDir 'tomcat'
        }
    }
}
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

war {
    from 'tomcat/root' // adds a file-set to the root of the archive
    webInf { from 'tomcat/additionalWebInf' } // adds a file-set to the WEB-INF dir.
    classpath fileTree('additionalLibs') // adds a file-set to the WEB-INF/lib dir.
    //classpath configurations.moreLibs // adds a configuration to the WEB-INF/lib dir.
    //webXml = file('src/someWeb.xml') // copies a file to WEB-INF/web.xml
}

